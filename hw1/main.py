import random
import time

def binPow(base, exponent):
  result = 1
  while(exponent > 0):
    if (exponent % 2 == 0):
      base *= base      
      exponent //= 2
    else:
      result *= base
      exponent -= 1
  return result

def genRandomKey(keySize):
  maxKeyVal = binPow(2, keySize) - 1;
  return random.randint(0, maxKeyVal); 

MAXTIME = 600

def bruteforceTimeNeeded(key, keySize):
  initialTime = time.perf_counter()
  for val in range(0, binPow(2, keySize) - 1):
    timePassed = time.perf_counter() - initialTime
    if val == key:
      return timePassed
    if timePassed > MAXTIME:
      return "inf"

def fancyOutput(key, keySize, t):
  print("There will be {} possible unique options for the key generated by the {} byte sequence.\n ".format(binPow(2, keySize), keySize))
  print("Pseudorandomly generated key is {}.\n".format(key))
  if (t != "inf"):
    print("Bruteforcing the randomly chosen key took {0:f} seconds.\n".format(t))
  else:
    print("Bruteforcing the chosen key wold take too long :(")
  print("-----------------------------------------------------------------------------\n")


KEYSIZES = [8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096]

if __name__ == '__main__':
  for keySize in KEYSIZES:
    key = genRandomKey(keySize)
    t = bruteforceTimeNeeded(key, keySize)
    fancyOutput(key, keySize, t)
  
  


